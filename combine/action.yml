name: Combine Geode mods
description: Combines the same Geode mod built for different platforms into a single file.

inputs:
  cli:
    description: Which CLI version to use, defaults to latest release.
    required: false
    default: latest
  delete-artifacts:
    description: Whether to delete temporary artifacts left by the build action.
    required: false
    default: true

outputs:
  build-output:
    description: A folder containing the built .geode file(s)
    value: ${{ steps.merge.outputs.output }}

runs:
  using: composite
  steps:
    - name: Download CLI
      uses: robinraju/release-downloader@v1
      with:
        repository: geode-sdk/cli
        latest: ${{ inputs.cli == 'latest' }}
        tag: ${{ inputs.cli != 'latest' && inputs.cli || '' }}
        tarBall: false
        zipBall: false
        fileName: "*-linux.zip"
        extract: true
        out-file-path: ${{ github.action_path }}

    - name: Add CLI to PATH
      run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: "${{ github.action_path }}/artifacts"
    
    - name: Combine mods
      id: merge
      shell: bash
      run: |
        cd "${{ github.action_path }}"
        chmod +x ./geode
        mkdir out
        MODS=$(find . -name *.geode -type f -printf "%f\n" | sort -u)
        for mod in $MODS; do
          echo "Merging $mod"
          PACKAGE_ARGS=""
          if [ -f "./artifacts/geode-build-win/$mod" ]; then
            PACKAGE_ARGS="$PACKAGE_ARGS ./artifacts/geode-build-win/$mod"
          fi
          if [ -f "./artifacts/geode-build-mac/$mod" ]; then
            PACKAGE_ARGS="$PACKAGE_ARGS ./artifacts/geode-build-mac/$mod"
          fi
          if [ -f "./artifacts/geode-build-android32/$mod" ]; then
            PACKAGE_ARGS="$PACKAGE_ARGS ./artifacts/geode-build-android32/$mod"
          fi
          if [ -f "./artifacts/geode-build-android64/$mod" ]; then
            PACKAGE_ARGS="$PACKAGE_ARGS ./artifacts/geode-build-android64/$mod"
          fi
          ARG_LIST=($PACKAGE_ARGS)
          FIRST="${ARG_LIST[0]}"
          if [ ${#ARG_LIST[@]} != 1 ]; then
            geode package merge $PACKAGE_ARGS
          fi
          cp $FIRST out
        done
        if [ -f "./artifacts/geode-build-win/$(basename $FIRST .geode).pdb" ]; then
          cp "./artifacts/geode-build-win/$(basename $FIRST .geode).pdb" out
        fi
        echo "output=$(realpath out)" >> $GITHUB_OUTPUT

    - name: Delete Windows artifacts
      uses: geekyeggo/delete-artifact@v5
      if: ${{ inputs.delete-artifacts }}
      with:
        name: geode-build-win
        failOnError: false

    - name: Delete Mac artifacts
      uses: geekyeggo/delete-artifact@v5
      if: ${{ inputs.delete-artifacts }}
      with:
        name: geode-build-mac
        failOnError: false

    - name: Delete Android 32-bit artifacts
      uses: geekyeggo/delete-artifact@v5
      if: ${{ inputs.delete-artifacts }}
      with:
        name: geode-build-android32
        failOnError: false

    - name: Delete Android 64-bit artifacts
      uses: geekyeggo/delete-artifact@v5
      if: ${{ inputs.delete-artifacts }}
      with:
        name: geode-build-android64
        failOnError: false
