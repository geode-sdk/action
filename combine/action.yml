name: Combine Geode Mods
description: Combines the same Geode mod built for different platforms into a single file

inputs:
  cli:
    description: Which CLI version to use (defaults to latest release).
    required: false
    default: latest
  delete-artifacts:
    description: Whether to delete temporary artifacts left by the build action.
    required: false
    default: true

outputs:
  build-output:
    description: A folder containing the built .geode file(s)
    value: ${{ steps.merge.outputs.output }}

runs:
  using: composite
  steps:
    - name: Download Geode CLI
      uses: robinraju/release-downloader@v1
      with:
        repository: geode-sdk/cli
        latest: ${{ inputs.cli == 'latest' }}
        tag: ${{ inputs.cli != 'latest' && inputs.cli || '' }}
        tarBall: false
        zipBall: false
        fileName: "*-linux.zip"
        extract: true
        out-file-path: ${{ github.action_path }}

    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: "${{ github.action_path }}/artifacts"

    - name: Combine artifacts
      id: merge
      shell: bash
      run: |
        cd "${{ github.action_path }}"
        chmod +x ./geode
        mkdir out
        MODS=$(find . -name "*.geode" -type f -printf "%f\n" | sort -u)
        for mod in $MODS; do
          echo "Merging $mod"
          PACKAGE_ARGS=""
          for platform in win mac android32 android64; do
            platform_file="./artifacts/geode-build-${platform}/$mod"
            if [ -f "$platform_file" ]; then
              PACKAGE_ARGS="$PACKAGE_ARGS $platform_file"
            fi
          done
          ARG_LIST=($PACKAGE_ARGS)
          FIRST="${ARG_LIST[0]}"
          if [ ${#ARG_LIST[@]} -gt 1 ]; then
            geode package merge $PACKAGE_ARGS
          fi
          cp $FIRST out
        done
        pdb_file="./artifacts/geode-build-win/$(basename $FIRST .geode).pdb"
        if [ -f "$pdb_file" ]; then
          cp "$pdb_file" out
        fi
        echo "output=$(realpath out)" >> $GITHUB_OUTPUT

    - name: Delete temporary artifacts (Windows)
      if: ${{ inputs.delete-artifacts }}
      uses: geekyeggo/delete-artifact@v5
      with:
        name: geode-build-win
        failOnError: false

    - name: Delete temporary artifacts (macOS)
      if: ${{ inputs.delete-artifacts }}
      uses: geekyeggo/delete-artifact@v5
      with:
        name: geode-build-mac
        failOnError: false

    - name: Delete temporary artifacts (Android32)
      if: ${{ inputs.delete-artifacts }}
      uses: geekyeggo/delete-artifact@v5
      with:
        name: geode-build-android32
        failOnError: false

    - name: Delete temporary artifacts (Android64)
      if: ${{ inputs.delete-artifacts }}
      uses: geekyeggo/delete-artifact@v5
      with:
        name: geode-build-android64
        failOnError: false
